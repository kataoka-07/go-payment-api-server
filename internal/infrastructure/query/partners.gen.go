// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-payment-api-server/internal/domain/model"
)

func newPartner(db *gorm.DB, opts ...gen.DOOption) partner {
	_partner := partner{}

	_partner.partnerDo.UseDB(db, opts...)
	_partner.partnerDo.UseModel(&model.Partner{})

	tableName := _partner.partnerDo.TableName()
	_partner.ALL = field.NewAsterisk(tableName)
	_partner.ID = field.NewInt64(tableName, "id")
	_partner.CompanyID = field.NewInt64(tableName, "company_id")
	_partner.Name = field.NewString(tableName, "name")
	_partner.CeoName = field.NewString(tableName, "ceo_name")
	_partner.Phone = field.NewString(tableName, "phone")
	_partner.PostalCode = field.NewString(tableName, "postal_code")
	_partner.Address = field.NewString(tableName, "address")
	_partner.CreatedAt = field.NewTime(tableName, "created_at")
	_partner.UpdatedAt = field.NewTime(tableName, "updated_at")

	_partner.fillFieldMap()

	return _partner
}

type partner struct {
	partnerDo partnerDo

	ALL        field.Asterisk
	ID         field.Int64
	CompanyID  field.Int64
	Name       field.String
	CeoName    field.String
	Phone      field.String
	PostalCode field.String
	Address    field.String
	CreatedAt  field.Time
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (p partner) Table(newTableName string) *partner {
	p.partnerDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p partner) As(alias string) *partner {
	p.partnerDo.DO = *(p.partnerDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *partner) updateTableName(table string) *partner {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.CompanyID = field.NewInt64(table, "company_id")
	p.Name = field.NewString(table, "name")
	p.CeoName = field.NewString(table, "ceo_name")
	p.Phone = field.NewString(table, "phone")
	p.PostalCode = field.NewString(table, "postal_code")
	p.Address = field.NewString(table, "address")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *partner) WithContext(ctx context.Context) IPartnerDo { return p.partnerDo.WithContext(ctx) }

func (p partner) TableName() string { return p.partnerDo.TableName() }

func (p partner) Alias() string { return p.partnerDo.Alias() }

func (p partner) Columns(cols ...field.Expr) gen.Columns { return p.partnerDo.Columns(cols...) }

func (p *partner) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *partner) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["company_id"] = p.CompanyID
	p.fieldMap["name"] = p.Name
	p.fieldMap["ceo_name"] = p.CeoName
	p.fieldMap["phone"] = p.Phone
	p.fieldMap["postal_code"] = p.PostalCode
	p.fieldMap["address"] = p.Address
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p partner) clone(db *gorm.DB) partner {
	p.partnerDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p partner) replaceDB(db *gorm.DB) partner {
	p.partnerDo.ReplaceDB(db)
	return p
}

type partnerDo struct{ gen.DO }

type IPartnerDo interface {
	gen.SubQuery
	Debug() IPartnerDo
	WithContext(ctx context.Context) IPartnerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPartnerDo
	WriteDB() IPartnerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPartnerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPartnerDo
	Not(conds ...gen.Condition) IPartnerDo
	Or(conds ...gen.Condition) IPartnerDo
	Select(conds ...field.Expr) IPartnerDo
	Where(conds ...gen.Condition) IPartnerDo
	Order(conds ...field.Expr) IPartnerDo
	Distinct(cols ...field.Expr) IPartnerDo
	Omit(cols ...field.Expr) IPartnerDo
	Join(table schema.Tabler, on ...field.Expr) IPartnerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPartnerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPartnerDo
	Group(cols ...field.Expr) IPartnerDo
	Having(conds ...gen.Condition) IPartnerDo
	Limit(limit int) IPartnerDo
	Offset(offset int) IPartnerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPartnerDo
	Unscoped() IPartnerDo
	Create(values ...*model.Partner) error
	CreateInBatches(values []*model.Partner, batchSize int) error
	Save(values ...*model.Partner) error
	First() (*model.Partner, error)
	Take() (*model.Partner, error)
	Last() (*model.Partner, error)
	Find() ([]*model.Partner, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Partner, err error)
	FindInBatches(result *[]*model.Partner, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Partner) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPartnerDo
	Assign(attrs ...field.AssignExpr) IPartnerDo
	Joins(fields ...field.RelationField) IPartnerDo
	Preload(fields ...field.RelationField) IPartnerDo
	FirstOrInit() (*model.Partner, error)
	FirstOrCreate() (*model.Partner, error)
	FindByPage(offset int, limit int) (result []*model.Partner, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPartnerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p partnerDo) Debug() IPartnerDo {
	return p.withDO(p.DO.Debug())
}

func (p partnerDo) WithContext(ctx context.Context) IPartnerDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p partnerDo) ReadDB() IPartnerDo {
	return p.Clauses(dbresolver.Read)
}

func (p partnerDo) WriteDB() IPartnerDo {
	return p.Clauses(dbresolver.Write)
}

func (p partnerDo) Session(config *gorm.Session) IPartnerDo {
	return p.withDO(p.DO.Session(config))
}

func (p partnerDo) Clauses(conds ...clause.Expression) IPartnerDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p partnerDo) Returning(value interface{}, columns ...string) IPartnerDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p partnerDo) Not(conds ...gen.Condition) IPartnerDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p partnerDo) Or(conds ...gen.Condition) IPartnerDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p partnerDo) Select(conds ...field.Expr) IPartnerDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p partnerDo) Where(conds ...gen.Condition) IPartnerDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p partnerDo) Order(conds ...field.Expr) IPartnerDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p partnerDo) Distinct(cols ...field.Expr) IPartnerDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p partnerDo) Omit(cols ...field.Expr) IPartnerDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p partnerDo) Join(table schema.Tabler, on ...field.Expr) IPartnerDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p partnerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPartnerDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p partnerDo) RightJoin(table schema.Tabler, on ...field.Expr) IPartnerDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p partnerDo) Group(cols ...field.Expr) IPartnerDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p partnerDo) Having(conds ...gen.Condition) IPartnerDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p partnerDo) Limit(limit int) IPartnerDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p partnerDo) Offset(offset int) IPartnerDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p partnerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPartnerDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p partnerDo) Unscoped() IPartnerDo {
	return p.withDO(p.DO.Unscoped())
}

func (p partnerDo) Create(values ...*model.Partner) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p partnerDo) CreateInBatches(values []*model.Partner, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p partnerDo) Save(values ...*model.Partner) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p partnerDo) First() (*model.Partner, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Partner), nil
	}
}

func (p partnerDo) Take() (*model.Partner, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Partner), nil
	}
}

func (p partnerDo) Last() (*model.Partner, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Partner), nil
	}
}

func (p partnerDo) Find() ([]*model.Partner, error) {
	result, err := p.DO.Find()
	return result.([]*model.Partner), err
}

func (p partnerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Partner, err error) {
	buf := make([]*model.Partner, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p partnerDo) FindInBatches(result *[]*model.Partner, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p partnerDo) Attrs(attrs ...field.AssignExpr) IPartnerDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p partnerDo) Assign(attrs ...field.AssignExpr) IPartnerDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p partnerDo) Joins(fields ...field.RelationField) IPartnerDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p partnerDo) Preload(fields ...field.RelationField) IPartnerDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p partnerDo) FirstOrInit() (*model.Partner, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Partner), nil
	}
}

func (p partnerDo) FirstOrCreate() (*model.Partner, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Partner), nil
	}
}

func (p partnerDo) FindByPage(offset int, limit int) (result []*model.Partner, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p partnerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p partnerDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p partnerDo) Delete(models ...*model.Partner) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *partnerDo) withDO(do gen.Dao) *partnerDo {
	p.DO = *do.(*gen.DO)
	return p
}
