// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-payment-api-server/internal/domain/model"
)

func newPartnerBankAccount(db *gorm.DB, opts ...gen.DOOption) partnerBankAccount {
	_partnerBankAccount := partnerBankAccount{}

	_partnerBankAccount.partnerBankAccountDo.UseDB(db, opts...)
	_partnerBankAccount.partnerBankAccountDo.UseModel(&model.PartnerBankAccount{})

	tableName := _partnerBankAccount.partnerBankAccountDo.TableName()
	_partnerBankAccount.ALL = field.NewAsterisk(tableName)
	_partnerBankAccount.ID = field.NewInt64(tableName, "id")
	_partnerBankAccount.PartnerID = field.NewInt64(tableName, "partner_id")
	_partnerBankAccount.BankName = field.NewString(tableName, "bank_name")
	_partnerBankAccount.BranchName = field.NewString(tableName, "branch_name")
	_partnerBankAccount.AccountNumber = field.NewString(tableName, "account_number")
	_partnerBankAccount.AccountHolderName = field.NewString(tableName, "account_holder_name")
	_partnerBankAccount.CreatedAt = field.NewTime(tableName, "created_at")
	_partnerBankAccount.UpdatedAt = field.NewTime(tableName, "updated_at")

	_partnerBankAccount.fillFieldMap()

	return _partnerBankAccount
}

type partnerBankAccount struct {
	partnerBankAccountDo partnerBankAccountDo

	ALL               field.Asterisk
	ID                field.Int64
	PartnerID         field.Int64
	BankName          field.String
	BranchName        field.String
	AccountNumber     field.String
	AccountHolderName field.String
	CreatedAt         field.Time
	UpdatedAt         field.Time

	fieldMap map[string]field.Expr
}

func (p partnerBankAccount) Table(newTableName string) *partnerBankAccount {
	p.partnerBankAccountDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p partnerBankAccount) As(alias string) *partnerBankAccount {
	p.partnerBankAccountDo.DO = *(p.partnerBankAccountDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *partnerBankAccount) updateTableName(table string) *partnerBankAccount {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.PartnerID = field.NewInt64(table, "partner_id")
	p.BankName = field.NewString(table, "bank_name")
	p.BranchName = field.NewString(table, "branch_name")
	p.AccountNumber = field.NewString(table, "account_number")
	p.AccountHolderName = field.NewString(table, "account_holder_name")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *partnerBankAccount) WithContext(ctx context.Context) IPartnerBankAccountDo {
	return p.partnerBankAccountDo.WithContext(ctx)
}

func (p partnerBankAccount) TableName() string { return p.partnerBankAccountDo.TableName() }

func (p partnerBankAccount) Alias() string { return p.partnerBankAccountDo.Alias() }

func (p partnerBankAccount) Columns(cols ...field.Expr) gen.Columns {
	return p.partnerBankAccountDo.Columns(cols...)
}

func (p *partnerBankAccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *partnerBankAccount) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["partner_id"] = p.PartnerID
	p.fieldMap["bank_name"] = p.BankName
	p.fieldMap["branch_name"] = p.BranchName
	p.fieldMap["account_number"] = p.AccountNumber
	p.fieldMap["account_holder_name"] = p.AccountHolderName
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p partnerBankAccount) clone(db *gorm.DB) partnerBankAccount {
	p.partnerBankAccountDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p partnerBankAccount) replaceDB(db *gorm.DB) partnerBankAccount {
	p.partnerBankAccountDo.ReplaceDB(db)
	return p
}

type partnerBankAccountDo struct{ gen.DO }

type IPartnerBankAccountDo interface {
	gen.SubQuery
	Debug() IPartnerBankAccountDo
	WithContext(ctx context.Context) IPartnerBankAccountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPartnerBankAccountDo
	WriteDB() IPartnerBankAccountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPartnerBankAccountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPartnerBankAccountDo
	Not(conds ...gen.Condition) IPartnerBankAccountDo
	Or(conds ...gen.Condition) IPartnerBankAccountDo
	Select(conds ...field.Expr) IPartnerBankAccountDo
	Where(conds ...gen.Condition) IPartnerBankAccountDo
	Order(conds ...field.Expr) IPartnerBankAccountDo
	Distinct(cols ...field.Expr) IPartnerBankAccountDo
	Omit(cols ...field.Expr) IPartnerBankAccountDo
	Join(table schema.Tabler, on ...field.Expr) IPartnerBankAccountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPartnerBankAccountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPartnerBankAccountDo
	Group(cols ...field.Expr) IPartnerBankAccountDo
	Having(conds ...gen.Condition) IPartnerBankAccountDo
	Limit(limit int) IPartnerBankAccountDo
	Offset(offset int) IPartnerBankAccountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPartnerBankAccountDo
	Unscoped() IPartnerBankAccountDo
	Create(values ...*model.PartnerBankAccount) error
	CreateInBatches(values []*model.PartnerBankAccount, batchSize int) error
	Save(values ...*model.PartnerBankAccount) error
	First() (*model.PartnerBankAccount, error)
	Take() (*model.PartnerBankAccount, error)
	Last() (*model.PartnerBankAccount, error)
	Find() ([]*model.PartnerBankAccount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PartnerBankAccount, err error)
	FindInBatches(result *[]*model.PartnerBankAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PartnerBankAccount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPartnerBankAccountDo
	Assign(attrs ...field.AssignExpr) IPartnerBankAccountDo
	Joins(fields ...field.RelationField) IPartnerBankAccountDo
	Preload(fields ...field.RelationField) IPartnerBankAccountDo
	FirstOrInit() (*model.PartnerBankAccount, error)
	FirstOrCreate() (*model.PartnerBankAccount, error)
	FindByPage(offset int, limit int) (result []*model.PartnerBankAccount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPartnerBankAccountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p partnerBankAccountDo) Debug() IPartnerBankAccountDo {
	return p.withDO(p.DO.Debug())
}

func (p partnerBankAccountDo) WithContext(ctx context.Context) IPartnerBankAccountDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p partnerBankAccountDo) ReadDB() IPartnerBankAccountDo {
	return p.Clauses(dbresolver.Read)
}

func (p partnerBankAccountDo) WriteDB() IPartnerBankAccountDo {
	return p.Clauses(dbresolver.Write)
}

func (p partnerBankAccountDo) Session(config *gorm.Session) IPartnerBankAccountDo {
	return p.withDO(p.DO.Session(config))
}

func (p partnerBankAccountDo) Clauses(conds ...clause.Expression) IPartnerBankAccountDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p partnerBankAccountDo) Returning(value interface{}, columns ...string) IPartnerBankAccountDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p partnerBankAccountDo) Not(conds ...gen.Condition) IPartnerBankAccountDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p partnerBankAccountDo) Or(conds ...gen.Condition) IPartnerBankAccountDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p partnerBankAccountDo) Select(conds ...field.Expr) IPartnerBankAccountDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p partnerBankAccountDo) Where(conds ...gen.Condition) IPartnerBankAccountDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p partnerBankAccountDo) Order(conds ...field.Expr) IPartnerBankAccountDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p partnerBankAccountDo) Distinct(cols ...field.Expr) IPartnerBankAccountDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p partnerBankAccountDo) Omit(cols ...field.Expr) IPartnerBankAccountDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p partnerBankAccountDo) Join(table schema.Tabler, on ...field.Expr) IPartnerBankAccountDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p partnerBankAccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPartnerBankAccountDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p partnerBankAccountDo) RightJoin(table schema.Tabler, on ...field.Expr) IPartnerBankAccountDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p partnerBankAccountDo) Group(cols ...field.Expr) IPartnerBankAccountDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p partnerBankAccountDo) Having(conds ...gen.Condition) IPartnerBankAccountDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p partnerBankAccountDo) Limit(limit int) IPartnerBankAccountDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p partnerBankAccountDo) Offset(offset int) IPartnerBankAccountDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p partnerBankAccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPartnerBankAccountDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p partnerBankAccountDo) Unscoped() IPartnerBankAccountDo {
	return p.withDO(p.DO.Unscoped())
}

func (p partnerBankAccountDo) Create(values ...*model.PartnerBankAccount) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p partnerBankAccountDo) CreateInBatches(values []*model.PartnerBankAccount, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p partnerBankAccountDo) Save(values ...*model.PartnerBankAccount) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p partnerBankAccountDo) First() (*model.PartnerBankAccount, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PartnerBankAccount), nil
	}
}

func (p partnerBankAccountDo) Take() (*model.PartnerBankAccount, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PartnerBankAccount), nil
	}
}

func (p partnerBankAccountDo) Last() (*model.PartnerBankAccount, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PartnerBankAccount), nil
	}
}

func (p partnerBankAccountDo) Find() ([]*model.PartnerBankAccount, error) {
	result, err := p.DO.Find()
	return result.([]*model.PartnerBankAccount), err
}

func (p partnerBankAccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PartnerBankAccount, err error) {
	buf := make([]*model.PartnerBankAccount, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p partnerBankAccountDo) FindInBatches(result *[]*model.PartnerBankAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p partnerBankAccountDo) Attrs(attrs ...field.AssignExpr) IPartnerBankAccountDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p partnerBankAccountDo) Assign(attrs ...field.AssignExpr) IPartnerBankAccountDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p partnerBankAccountDo) Joins(fields ...field.RelationField) IPartnerBankAccountDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p partnerBankAccountDo) Preload(fields ...field.RelationField) IPartnerBankAccountDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p partnerBankAccountDo) FirstOrInit() (*model.PartnerBankAccount, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PartnerBankAccount), nil
	}
}

func (p partnerBankAccountDo) FirstOrCreate() (*model.PartnerBankAccount, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PartnerBankAccount), nil
	}
}

func (p partnerBankAccountDo) FindByPage(offset int, limit int) (result []*model.PartnerBankAccount, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p partnerBankAccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p partnerBankAccountDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p partnerBankAccountDo) Delete(models ...*model.PartnerBankAccount) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *partnerBankAccountDo) withDO(do gen.Dao) *partnerBankAccountDo {
	p.DO = *do.(*gen.DO)
	return p
}
